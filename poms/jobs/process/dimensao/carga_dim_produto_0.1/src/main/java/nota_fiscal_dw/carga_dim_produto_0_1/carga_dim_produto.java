// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package nota_fiscal_dw.carga_dim_produto_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: carga_dim_produto Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class carga_dim_produto implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(banco_dados_Password != null){
				
					this.setProperty("banco_dados_Password", banco_dados_Password.toString());
				
			}
			
			if(banco_dados_Login != null){
				
					this.setProperty("banco_dados_Login", banco_dados_Login.toString());
				
			}
			
			if(banco_dados_Server != null){
				
					this.setProperty("banco_dados_Server", banco_dados_Server.toString());
				
			}
			
			if(banco_dados_Database != null){
				
					this.setProperty("banco_dados_Database", banco_dados_Database.toString());
				
			}
			
			if(banco_dados_Schema != null){
				
					this.setProperty("banco_dados_Schema", banco_dados_Schema.toString());
				
			}
			
			if(banco_dados_Port != null){
				
					this.setProperty("banco_dados_Port", banco_dados_Port.toString());
				
			}
			
		}

public java.lang.String banco_dados_Password;
public java.lang.String getBanco_dados_Password(){
	return this.banco_dados_Password;
}
public String banco_dados_Login;
public String getBanco_dados_Login(){
	return this.banco_dados_Login;
}
public String banco_dados_Server;
public String getBanco_dados_Server(){
	return this.banco_dados_Server;
}
public String banco_dados_Database;
public String getBanco_dados_Database(){
	return this.banco_dados_Database;
}
public String banco_dados_Schema;
public String getBanco_dados_Schema(){
	return this.banco_dados_Schema;
}
public String banco_dados_Port;
public String getBanco_dados_Port(){
	return this.banco_dados_Port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "carga_dim_produto";
	private final String projectName = "NOTA_FISCAL_DW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				carga_dim_produto.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(carga_dim_produto.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_COUNT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class saida_departamentoStruct implements routines.system.IPersistableRow<saida_departamentoStruct> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COD_PRODUTO;

				public String getCOD_PRODUTO () {
					return this.COD_PRODUTO;
				}
				
			    public String NOME_PRODUTO;

				public String getNOME_PRODUTO () {
					return this.NOME_PRODUTO;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COD_PRODUTO == null) ? 0 : this.COD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final saida_departamentoStruct other = (saida_departamentoStruct) obj;
		
						if (this.COD_PRODUTO == null) {
							if (other.COD_PRODUTO != null)
								return false;
						
						} else if (!this.COD_PRODUTO.equals(other.COD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(saida_departamentoStruct other) {

		other.COD_PRODUTO = this.COD_PRODUTO;
	            other.NOME_PRODUTO = this.NOME_PRODUTO;
	            
	}

	public void copyKeysDataTo(saida_departamentoStruct other) {

		other.COD_PRODUTO = this.COD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
					this.COD_PRODUTO = readString(dis);
					
					this.NOME_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_PRODUTO,dos);
					
					// String
				
						writeString(this.NOME_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_PRODUTO="+COD_PRODUTO);
		sb.append(",NOME_PRODUTO="+NOME_PRODUTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saida_departamentoStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_PRODUTO, other.COD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class STG_PRODUTOStruct implements routines.system.IPersistableRow<STG_PRODUTOStruct> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];

	
			    public String cod_produto;

				public String getCod_produto () {
					return this.cod_produto;
				}
				
			    public String nom_produto;

				public String getNom_produto () {
					return this.nom_produto;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
					this.cod_produto = readString(dis);
					
					this.nom_produto = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cod_produto,dos);
					
					// String
				
						writeString(this.nom_produto,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cod_produto="+cod_produto);
		sb.append(",nom_produto="+nom_produto);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(STG_PRODUTOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		STG_PRODUTOStruct STG_PRODUTO = new STG_PRODUTOStruct();
saida_departamentoStruct saida_departamento = new saida_departamentoStruct();





	
	/**
	 * [tDBSCD_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_1", false);
		start_Hash.put("tDBSCD_1", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("saida_departamento" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBSCD_1 = 0;
		

        class SCDSK_tDBSCD_1 {
private int hashCode;
public boolean hashCodeDirty = true;
String COD_PRODUTO;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_1 other = (SCDSK_tDBSCD_1) obj;
if (this.COD_PRODUTO == null) {
if (other.COD_PRODUTO!= null)
return false;
} else if (!this.COD_PRODUTO.equals(other.COD_PRODUTO))
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + (COD_PRODUTO == null ? 0 : COD_PRODUTO.hashCode());
hashCodeDirty = false;
}
return hashCode;
}
}

    class SCDStruct_tDBSCD_1 {
private String NOME_PRODUTO;
}

    int nb_line_update_tDBSCD_1 = 0;
    int nb_line_inserted_tDBSCD_1 = 0;
    int nb_line_rejected_tDBSCD_1 = 0;
        String dbSchema_tDBSCD_1 = context.banco_dados_Schema;
        java.lang.Class.forName("org.postgresql.Driver");
        String connectionString_tDBSCD_1 = "jdbc:postgresql://" + context.banco_dados_Server + ":" + context.banco_dados_Port + "/" + context.banco_dados_Database;
	        
		
		
		
	final String decryptedPassword_tDBSCD_1 = context.banco_dados_Password; 
	   	
        java.sql.Connection connection_tDBSCD_1 = java.sql.DriverManager.getConnection(connectionString_tDBSCD_1, context.banco_dados_Login, decryptedPassword_tDBSCD_1);
    String tableName_tDBSCD_1 = null;
    if(dbSchema_tDBSCD_1 == null || dbSchema_tDBSCD_1.trim().length() == 0) {
        tableName_tDBSCD_1 = "DIM_PRODUTO";
    } else {
        tableName_tDBSCD_1 = dbSchema_tDBSCD_1 + "\".\"" + "DIM_PRODUTO";
    }
    java.sql.Timestamp timestamp_tDBSCD_1 = null;
    String tmpValue_tDBSCD_1 = null;    
        String search_tDBSCD_1 = "SELECT \"COD_PRODUTO\", \"NOME_PRODUTO\" FROM \"" + tableName_tDBSCD_1 + "\" WHERE \"DTC_FIM\" IS NULL";
        java.sql.Statement statement_tDBSCD_1 = connection_tDBSCD_1.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_1 = statement_tDBSCD_1.executeQuery(search_tDBSCD_1);
        java.util.Map<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1> cache_tDBSCD_1 = new java.util.HashMap<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1>();
        while(resultSet_tDBSCD_1.next()) {
            SCDSK_tDBSCD_1 sk_tDBSCD_1 = new SCDSK_tDBSCD_1();
            SCDStruct_tDBSCD_1 row_tDBSCD_1 = new SCDStruct_tDBSCD_1();
                    if(resultSet_tDBSCD_1.getObject(1) != null) {
                        sk_tDBSCD_1.COD_PRODUTO = resultSet_tDBSCD_1.getString(1);
                    }
                    if(resultSet_tDBSCD_1.getObject(2) != null) {
                        row_tDBSCD_1.NOME_PRODUTO = resultSet_tDBSCD_1.getString(2);
                    }
            cache_tDBSCD_1.put(sk_tDBSCD_1, row_tDBSCD_1);
        }
        resultSet_tDBSCD_1.close();
        statement_tDBSCD_1.close();
        int nextSurrogateKey_tDBSCD_1 = 1;
            if(cache_tDBSCD_1.size() > 0) {
        String tmpQuery_tDBSCD_1 = "SELECT MAX(\"SK_PRODUTO\") FROM \"" + tableName_tDBSCD_1 + "\"";
        java.sql.Statement tmpStmt_tDBSCD_1 = connection_tDBSCD_1.createStatement();
        java.sql.ResultSet tmpRS_tDBSCD_1 = tmpStmt_tDBSCD_1.executeQuery(tmpQuery_tDBSCD_1);
        if(tmpRS_tDBSCD_1.next() && tmpRS_tDBSCD_1.getObject(1) != null) {
            nextSurrogateKey_tDBSCD_1 = tmpRS_tDBSCD_1.getInt(1) + 1;
        }
        tmpRS_tDBSCD_1.close();
        tmpStmt_tDBSCD_1.close();
            }            
    String insertionSQL_tDBSCD_1 = "INSERT INTO \"" + tableName_tDBSCD_1 + "\"(\"SK_PRODUTO\", \"COD_PRODUTO\", \"NOME_PRODUTO\", \"DTC_INICIO\", \"DTC_FIM\") VALUES(?, ?, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_1 = connection_tDBSCD_1.prepareStatement(insertionSQL_tDBSCD_1);
            insertionStatement_tDBSCD_1.setTimestamp(4, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));
            insertionStatement_tDBSCD_1.setNull(5, java.sql.Types.DATE);
        String updateSQLForType2_tDBSCD_1 = "UPDATE \"" + tableName_tDBSCD_1 + "\" SET \"DTC_FIM\" = ? WHERE \"COD_PRODUTO\" = ? AND \"DTC_FIM\" IS NULL";
        java.sql.PreparedStatement updateForType2_tDBSCD_1 = connection_tDBSCD_1.prepareStatement(updateSQLForType2_tDBSCD_1);
            updateForType2_tDBSCD_1.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));
    
        SCDSK_tDBSCD_1 lookUpKey_tDBSCD_1 = null;        
    SCDStruct_tDBSCD_1 lookUpValue_tDBSCD_1 = null;

 



/**
 * [tDBSCD_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("STG_PRODUTO" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
saida_departamentoStruct saida_departamento_tmp = new saida_departamentoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = context.banco_dados_Login;
					
					
					
	final String decryptedPassword_tDBInput_1 = context.banco_dados_Password; 
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
			String url_tDBInput_1 = "jdbc:postgresql://" + context.banco_dados_Server + ":" + context.banco_dados_Port + "/" + context.banco_dados_Database;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"STG_PRODUTO\".\"cod_produto\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"STG_PRODUTO\".\"nom_produto\"\nFROM \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"STG_PRODUTO\"";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								STG_PRODUTO.cod_produto = null;
							} else {
	                         		
        	STG_PRODUTO.cod_produto = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								STG_PRODUTO.nom_produto = null;
							} else {
	                         		
        	STG_PRODUTO.nom_produto = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//STG_PRODUTO
			//STG_PRODUTO


			
				if(execStat){
					runStat.updateStatOnConnection("STG_PRODUTO"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

saida_departamento = null;


// # Output table : 'saida_departamento'
saida_departamento_tmp.COD_PRODUTO = STG_PRODUTO.cod_produto ;
saida_departamento_tmp.NOME_PRODUTO =  STG_PRODUTO.nom_produto ;
saida_departamento = saida_departamento_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "saida_departamento"
if(saida_departamento != null) { 



	
	/**
	 * [tDBSCD_1 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

			//saida_departamento
			//saida_departamento


			
				if(execStat){
					runStat.updateStatOnConnection("saida_departamento"+iterateId,1, 1);
				} 
			

		

 	try {
        lookUpKey_tDBSCD_1 = new SCDSK_tDBSCD_1();
            lookUpKey_tDBSCD_1.COD_PRODUTO = saida_departamento.COD_PRODUTO;
        lookUpKey_tDBSCD_1.hashCodeDirty = true;
        lookUpValue_tDBSCD_1 = cache_tDBSCD_1.get(lookUpKey_tDBSCD_1);    
    if(lookUpValue_tDBSCD_1 == null) {
            lookUpValue_tDBSCD_1 = new SCDStruct_tDBSCD_1();
                            
                    insertionStatement_tDBSCD_1.setInt(1, nextSurrogateKey_tDBSCD_1);

                    nextSurrogateKey_tDBSCD_1++;
                    if(saida_departamento.COD_PRODUTO == null) {
insertionStatement_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(2, saida_departamento.COD_PRODUTO);
}

                    if(saida_departamento.NOME_PRODUTO == null) {
insertionStatement_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(3, saida_departamento.NOME_PRODUTO);
}

        nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();
    } else {
            if((lookUpValue_tDBSCD_1.NOME_PRODUTO == null && saida_departamento.NOME_PRODUTO!= null) || (lookUpValue_tDBSCD_1.NOME_PRODUTO != null && !lookUpValue_tDBSCD_1.NOME_PRODUTO.equals(saida_departamento.NOME_PRODUTO))) {
                    if(saida_departamento.COD_PRODUTO == null) {
updateForType2_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
updateForType2_tDBSCD_1.setString(2, saida_departamento.COD_PRODUTO);
}

                nb_line_update_tDBSCD_1 += updateForType2_tDBSCD_1.executeUpdate();                    
                            insertionStatement_tDBSCD_1.setInt(1, nextSurrogateKey_tDBSCD_1);

                            nextSurrogateKey_tDBSCD_1++;
                            if(saida_departamento.COD_PRODUTO == null) {
insertionStatement_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(2, saida_departamento.COD_PRODUTO);
}

                            if(saida_departamento.NOME_PRODUTO == null) {
insertionStatement_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(3, saida_departamento.NOME_PRODUTO);
}

                nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();
            }
    }

	} catch (java.lang.Exception e) {//catch
  		
                System.err.print(e.getMessage());
	}//end catch
	
                lookUpValue_tDBSCD_1.NOME_PRODUTO = saida_departamento.NOME_PRODUTO;
        cache_tDBSCD_1.put(lookUpKey_tDBSCD_1, lookUpValue_tDBSCD_1);

 


	tos_count_tDBSCD_1++;

/**
 * [tDBSCD_1 main ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_end ] stop
 */

} // End of branch "saida_departamento"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("STG_PRODUTO"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBSCD_1 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

    insertionStatement_tDBSCD_1.close();
        updateForType2_tDBSCD_1.close();
        if(connection_tDBSCD_1 != null && !connection_tDBSCD_1.isClosed()) {
            connection_tDBSCD_1.close();
        }
    globalMap.put("tDBSCD_1_NB_LINE_UPDATED", nb_line_update_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_REJECTED",nb_line_rejected_tDBSCD_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("saida_departamento"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBSCD_1", true);
end_Hash.put("tDBSCD_1", System.currentTimeMillis());




/**
 * [tDBSCD_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBSCD_1 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tCreateTable_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tCreateTable_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_2", false);
		start_Hash.put("tCreateTable_2", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_2";

	
		int tos_count_tCreateTable_2 = 0;
		

 



/**
 * [tCreateTable_2 begin ] stop
 */
	
	/**
	 * [tCreateTable_2 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

    try{
            String driverClass_tCreateTable_2="org.postgresql.Driver";
String url_tCreateTable_2="jdbc:postgresql://" + context.banco_dados_Server + ":" + context.banco_dados_Port + "/" + context.banco_dados_Database;
String dbUser_tCreateTable_2=context.banco_dados_Login;

        String tableName_tCreateTable_2 = "DIM_PRODUTO";
String dbSchema_tCreateTable_2 = context.banco_dados_Schema;
if(dbSchema_tCreateTable_2 != null && dbSchema_tCreateTable_2.trim().length() != 0) {tableName_tCreateTable_2 = dbSchema_tCreateTable_2 + "\".\"" + tableName_tCreateTable_2;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_2= context.banco_dados_Password;
java.sql.Connection conn_tCreateTable_2= java.sql.DriverManager.getConnection(url_tCreateTable_2,dbUser_tCreateTable_2, decryptedPassword_tCreateTable_2);

            boolean whetherExist_tCreateTable_2 = false;
                    java.sql.DatabaseMetaData dbMetaData_tCreateTable_2 = conn_tCreateTable_2.getMetaData();
                    java.sql.ResultSet rsTable_tCreateTable_2 = dbMetaData_tCreateTable_2.getTables(null, null, null, new String[]{"TABLE"});
                    String defaultSchema_tCreateTable_2 = "public";
                    if(dbSchema_tCreateTable_2 == null || dbSchema_tCreateTable_2.trim().length() == 0) {
                        java.sql.Statement stmtSchema_tCreateTable_2 = conn_tCreateTable_2.createStatement();
                        java.sql.ResultSet rsSchema_tCreateTable_2 = stmtSchema_tCreateTable_2.executeQuery("select current_schema() ");
                        while(rsSchema_tCreateTable_2.next()){
                            defaultSchema_tCreateTable_2 = rsSchema_tCreateTable_2.getString("current_schema");
                        }
                        rsSchema_tCreateTable_2.close();
                        stmtSchema_tCreateTable_2.close();
                    }
                    while(rsTable_tCreateTable_2.next()) {
                        String table_tCreateTable_2 = rsTable_tCreateTable_2.getString("TABLE_NAME");
                        String schema_tCreateTable_2 = rsTable_tCreateTable_2.getString("TABLE_SCHEM");
                        if(table_tCreateTable_2.equals("DIM_PRODUTO") 
                            && (schema_tCreateTable_2.equals(dbSchema_tCreateTable_2) || ((dbSchema_tCreateTable_2 ==null || dbSchema_tCreateTable_2.trim().length() ==0) && defaultSchema_tCreateTable_2.equals(schema_tCreateTable_2)))) {
                            whetherExist_tCreateTable_2 = true;
                            break;
                        }
                    }
            rsTable_tCreateTable_2.close();
                if(!whetherExist_tCreateTable_2) {
                    java.sql.Statement stmt_tCreateTable_2 = conn_tCreateTable_2.createStatement();
                    stmt_tCreateTable_2.execute("CREATE TABLE \"" + tableName_tCreateTable_2 + "\"(\"SK_PRODUTO\" INT4  not null ,\"COD_PRODUTO\" VARCHAR(10)  ,\"NOME_PRODUTO\" VARCHAR(200)  ,\"DTC_INICIO\" TIMESTAMP ,\"DTC_FIM\" TIMESTAMP ,primary key(\"SK_PRODUTO\"))");                
		            
                }
        if(conn_tCreateTable_2 != null && !conn_tCreateTable_2.isClosed()) {
conn_tCreateTable_2.close();
}

        globalMap.put("tCreateTable_2_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_2 + "\"(\"SK_PRODUTO\" INT4  not null ,\"COD_PRODUTO\" VARCHAR(10)  ,\"NOME_PRODUTO\" VARCHAR(200)  ,\"DTC_INICIO\" TIMESTAMP ,\"DTC_FIM\" TIMESTAMP ,primary key(\"SK_PRODUTO\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_2_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_2++;

/**
 * [tCreateTable_2 main ] stop
 */
	
	/**
	 * [tCreateTable_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 



/**
 * [tCreateTable_2 process_data_begin ] stop
 */
	
	/**
	 * [tCreateTable_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 



/**
 * [tCreateTable_2 process_data_end ] stop
 */
	
	/**
	 * [tCreateTable_2 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 

ok_Hash.put("tCreateTable_2", true);
end_Hash.put("tCreateTable_2", System.currentTimeMillis());




/**
 * [tCreateTable_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_2 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 



/**
 * [tCreateTable_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class COD_UNICStruct implements routines.system.IPersistableRow<COD_UNICStruct> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_PRODUTO;

				public int getSK_PRODUTO () {
					return this.SK_PRODUTO;
				}
				
			    public String COD_PRODUTO;

				public String getCOD_PRODUTO () {
					return this.COD_PRODUTO;
				}
				
			    public String NOME_PRODUTO;

				public String getNOME_PRODUTO () {
					return this.NOME_PRODUTO;
				}
				
			    public java.util.Date DTC_INICIO;

				public java.util.Date getDTC_INICIO () {
					return this.DTC_INICIO;
				}
				
			    public java.util.Date DTC_FIM;

				public java.util.Date getDTC_FIM () {
					return this.DTC_FIM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_PRODUTO;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final COD_UNICStruct other = (COD_UNICStruct) obj;
		
						if (this.SK_PRODUTO != other.SK_PRODUTO)
							return false;
					

		return true;
    }

	public void copyDataTo(COD_UNICStruct other) {

		other.SK_PRODUTO = this.SK_PRODUTO;
	            other.COD_PRODUTO = this.COD_PRODUTO;
	            other.NOME_PRODUTO = this.NOME_PRODUTO;
	            other.DTC_INICIO = this.DTC_INICIO;
	            other.DTC_FIM = this.DTC_FIM;
	            
	}

	public void copyKeysDataTo(COD_UNICStruct other) {

		other.SK_PRODUTO = this.SK_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
			        this.SK_PRODUTO = dis.readInt();
					
					this.COD_PRODUTO = readString(dis);
					
					this.NOME_PRODUTO = readString(dis);
					
					this.DTC_INICIO = readDate(dis);
					
					this.DTC_FIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_PRODUTO);
					
					// String
				
						writeString(this.COD_PRODUTO,dos);
					
					// String
				
						writeString(this.NOME_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_FIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_PRODUTO="+String.valueOf(SK_PRODUTO));
		sb.append(",COD_PRODUTO="+COD_PRODUTO);
		sb.append(",NOME_PRODUTO="+NOME_PRODUTO);
		sb.append(",DTC_INICIO="+String.valueOf(DTC_INICIO));
		sb.append(",DTC_FIM="+String.valueOf(DTC_FIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(COD_UNICStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_PRODUTO, other.SK_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DIM_PRODUTOStruct implements routines.system.IPersistableRow<DIM_PRODUTOStruct> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];

	
			    public int SK_PRODUTO;

				public int getSK_PRODUTO () {
					return this.SK_PRODUTO;
				}
				
			    public String COD_PRODUTO;

				public String getCOD_PRODUTO () {
					return this.COD_PRODUTO;
				}
				
			    public String NOME_PRODUTO;

				public String getNOME_PRODUTO () {
					return this.NOME_PRODUTO;
				}
				
			    public java.util.Date DTC_INICIO;

				public java.util.Date getDTC_INICIO () {
					return this.DTC_INICIO;
				}
				
			    public java.util.Date DTC_FIM;

				public java.util.Date getDTC_FIM () {
					return this.DTC_FIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
			        this.SK_PRODUTO = dis.readInt();
					
					this.COD_PRODUTO = readString(dis);
					
					this.NOME_PRODUTO = readString(dis);
					
					this.DTC_INICIO = readDate(dis);
					
					this.DTC_FIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_PRODUTO);
					
					// String
				
						writeString(this.COD_PRODUTO,dos);
					
					// String
				
						writeString(this.NOME_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_FIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_PRODUTO="+String.valueOf(SK_PRODUTO));
		sb.append(",COD_PRODUTO="+COD_PRODUTO);
		sb.append(",NOME_PRODUTO="+NOME_PRODUTO);
		sb.append(",DTC_INICIO="+String.valueOf(DTC_INICIO));
		sb.append(",DTC_FIM="+String.valueOf(DTC_FIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DIM_PRODUTOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_PRODUTO;

				public int getSK_PRODUTO () {
					return this.SK_PRODUTO;
				}
				
			    public String COD_PRODUTO;

				public String getCOD_PRODUTO () {
					return this.COD_PRODUTO;
				}
				
			    public String NOME_PRODUTO;

				public String getNOME_PRODUTO () {
					return this.NOME_PRODUTO;
				}
				
			    public java.util.Date DTC_INICIO;

				public java.util.Date getDTC_INICIO () {
					return this.DTC_INICIO;
				}
				
			    public java.util.Date DTC_FIM;

				public java.util.Date getDTC_FIM () {
					return this.DTC_FIM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_PRODUTO;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;
		
						if (this.SK_PRODUTO != other.SK_PRODUTO)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_2Struct other) {

		other.SK_PRODUTO = this.SK_PRODUTO;
	            other.COD_PRODUTO = this.COD_PRODUTO;
	            other.NOME_PRODUTO = this.NOME_PRODUTO;
	            other.DTC_INICIO = this.DTC_INICIO;
	            other.DTC_FIM = this.DTC_FIM;
	            
	}

	public void copyKeysDataTo(after_tDBInput_2Struct other) {

		other.SK_PRODUTO = this.SK_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
			        this.SK_PRODUTO = dis.readInt();
					
					this.COD_PRODUTO = readString(dis);
					
					this.NOME_PRODUTO = readString(dis);
					
					this.DTC_INICIO = readDate(dis);
					
					this.DTC_FIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_PRODUTO);
					
					// String
				
						writeString(this.COD_PRODUTO,dos);
					
					// String
				
						writeString(this.NOME_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_FIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_PRODUTO="+String.valueOf(SK_PRODUTO));
		sb.append(",COD_PRODUTO="+COD_PRODUTO);
		sb.append(",NOME_PRODUTO="+NOME_PRODUTO);
		sb.append(",DTC_INICIO="+String.valueOf(DTC_INICIO));
		sb.append(",DTC_FIM="+String.valueOf(DTC_FIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_PRODUTO, other.SK_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		DIM_PRODUTOStruct DIM_PRODUTO = new DIM_PRODUTOStruct();
COD_UNICStruct COD_UNIC = new COD_UNICStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("COD_UNIC" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.banco_dados_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "DIM_PRODUTO";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "DIM_PRODUTO";
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tDBOutput_1 = "jdbc:postgresql://"+context.banco_dados_Server+":"+context.banco_dados_Port+"/"+context.banco_dados_Database;
    dbUser_tDBOutput_1 = context.banco_dados_Login;

	final String decryptedPassword_tDBOutput_1 = context.banco_dados_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"COD_PRODUTO\" = ?,\"NOME_PRODUTO\" = ?,\"DTC_INICIO\" = ?,\"DTC_FIM\" = ? WHERE \"SK_PRODUTO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DIM_PRODUTO" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<COUNTStruct> tHash_Lookup_COUNT = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<COUNTStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<COUNTStruct>) 
					globalMap.get( "tHash_Lookup_COUNT" ))
					;					
					
	

COUNTStruct COUNTHashKey = new COUNTStruct();
COUNTStruct COUNTDefault = new COUNTStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
COD_UNICStruct COD_UNIC_tmp = new COD_UNICStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = context.banco_dados_Login;
					
					
					
	final String decryptedPassword_tDBInput_2 = context.banco_dados_Password; 
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
			String url_tDBInput_2 = "jdbc:postgresql://" + context.banco_dados_Server + ":" + context.banco_dados_Port + "/" + context.banco_dados_Database;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"SK_PRODUTO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"COD_PRODUTO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"NOME_PRODUTO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"DTC_INICIO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"DTC_FIM\"\nFROM \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\"";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								DIM_PRODUTO.SK_PRODUTO = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(1) != null) {
                DIM_PRODUTO.SK_PRODUTO = rs_tDBInput_2.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								DIM_PRODUTO.COD_PRODUTO = null;
							} else {
	                         		
        	DIM_PRODUTO.COD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								DIM_PRODUTO.NOME_PRODUTO = null;
							} else {
	                         		
        	DIM_PRODUTO.NOME_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								DIM_PRODUTO.DTC_INICIO = null;
							} else {
										
			DIM_PRODUTO.DTC_INICIO = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 4);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								DIM_PRODUTO.DTC_FIM = null;
							} else {
										
			DIM_PRODUTO.DTC_FIM = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 5);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//DIM_PRODUTO
			//DIM_PRODUTO


			
				if(execStat){
					runStat.updateStatOnConnection("DIM_PRODUTO"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "COUNT" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopCOUNT = false;
       		  	    	
       		  	    	
 							COUNTStruct COUNTObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		COUNTHashKey.COD_PRODUTO = DIM_PRODUTO.COD_PRODUTO ;
                        		    		

								
		                        	COUNTHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_COUNT.lookup( COUNTHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_COUNT != null && tHash_Lookup_COUNT.getCount(COUNTHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'COUNT' and it contains more one result from keys :  COUNT.COD_PRODUTO = '" + COUNTHashKey.COD_PRODUTO + "'");
								} // G 071
							

							COUNTStruct COUNT = null;
                    		  	 
							   
                    		  	 
	       		  	    	COUNTStruct fromLookup_COUNT = null;
							COUNT = COUNTDefault;
										 
							
								 
							
							
								if (tHash_Lookup_COUNT !=null && tHash_Lookup_COUNT.hasNext()) { // G 099
								
							
								
								fromLookup_COUNT = tHash_Lookup_COUNT.next();

							
							
								} // G 099
							
							

							if(fromLookup_COUNT != null) {
								COUNT = fromLookup_COUNT;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

COD_UNIC = null;


// # Output table : 'COD_UNIC'
// # Filter conditions 
if( 

COUNT.count == 1

 ) {
COD_UNIC_tmp.SK_PRODUTO = DIM_PRODUTO.SK_PRODUTO ;
COD_UNIC_tmp.COD_PRODUTO = DIM_PRODUTO.COD_PRODUTO ;
COD_UNIC_tmp.NOME_PRODUTO = DIM_PRODUTO.NOME_PRODUTO ;
COD_UNIC_tmp.DTC_INICIO = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","1900-01-01 00:00:00") ;
COD_UNIC_tmp.DTC_FIM = DIM_PRODUTO.DTC_FIM ;
COD_UNIC = COD_UNIC_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "COD_UNIC"
if(COD_UNIC != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//COD_UNIC
			//COD_UNIC


			
				if(execStat){
					runStat.updateStatOnConnection("COD_UNIC"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(COD_UNIC.COD_PRODUTO == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, COD_UNIC.COD_PRODUTO);
}

                    if(COD_UNIC.NOME_PRODUTO == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, COD_UNIC.NOME_PRODUTO);
}

                    if(COD_UNIC.DTC_INICIO != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(COD_UNIC.DTC_INICIO.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(COD_UNIC.DTC_FIM != null) {
pstmt_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(COD_UNIC.DTC_FIM.getTime()));
} else {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setInt(5 + count_tDBOutput_1, COD_UNIC.SK_PRODUTO);


    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "COD_UNIC"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_COUNT != null) {
						tHash_Lookup_COUNT.endGet();
					}
					globalMap.remove( "tHash_Lookup_COUNT" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DIM_PRODUTO"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("COD_UNIC"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_COUNT"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class COUNTStruct implements routines.system.IPersistableComparableLookupRow<COUNTStruct> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COD_PRODUTO;

				public String getCOD_PRODUTO () {
					return this.COD_PRODUTO;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COD_PRODUTO == null) ? 0 : this.COD_PRODUTO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final COUNTStruct other = (COUNTStruct) obj;
		
						if (this.COD_PRODUTO == null) {
							if (other.COD_PRODUTO != null)
								return false;
						
						} else if (!this.COD_PRODUTO.equals(other.COD_PRODUTO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(COUNTStruct other) {

		other.COD_PRODUTO = this.COD_PRODUTO;
	            other.count = this.count;
	            
	}

	public void copyKeysDataTo(COUNTStruct other) {

		other.COD_PRODUTO = this.COD_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
					this.COD_PRODUTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_PRODUTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.count = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.count, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_PRODUTO="+COD_PRODUTO);
		sb.append(",count="+String.valueOf(count));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(COUNTStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COD_PRODUTO, other.COD_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];

	
			    public String COD_PRODUTO;

				public String getCOD_PRODUTO () {
					return this.COD_PRODUTO;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
					this.COD_PRODUTO = readString(dis);
					
						this.count = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COD_PRODUTO="+COD_PRODUTO);
		sb.append(",count="+String.valueOf(count));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DIM_PRODUTO2Struct implements routines.system.IPersistableRow<DIM_PRODUTO2Struct> {
    final static byte[] commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
    static byte[] commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SK_PRODUTO;

				public int getSK_PRODUTO () {
					return this.SK_PRODUTO;
				}
				
			    public String COD_PRODUTO;

				public String getCOD_PRODUTO () {
					return this.COD_PRODUTO;
				}
				
			    public String NOME_PRODUTO;

				public String getNOME_PRODUTO () {
					return this.NOME_PRODUTO;
				}
				
			    public java.util.Date DTC_INICIO;

				public java.util.Date getDTC_INICIO () {
					return this.DTC_INICIO;
				}
				
			    public java.util.Date DTC_FIM;

				public java.util.Date getDTC_FIM () {
					return this.DTC_FIM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SK_PRODUTO;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DIM_PRODUTO2Struct other = (DIM_PRODUTO2Struct) obj;
		
						if (this.SK_PRODUTO != other.SK_PRODUTO)
							return false;
					

		return true;
    }

	public void copyDataTo(DIM_PRODUTO2Struct other) {

		other.SK_PRODUTO = this.SK_PRODUTO;
	            other.COD_PRODUTO = this.COD_PRODUTO;
	            other.NOME_PRODUTO = this.NOME_PRODUTO;
	            other.DTC_INICIO = this.DTC_INICIO;
	            other.DTC_FIM = this.DTC_FIM;
	            
	}

	public void copyKeysDataTo(DIM_PRODUTO2Struct other) {

		other.SK_PRODUTO = this.SK_PRODUTO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length) {
				if(length < 1024 && commonByteArray_NOTA_FISCAL_DW_carga_dim_produto.length == 0) {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[1024];
				} else {
   					commonByteArray_NOTA_FISCAL_DW_carga_dim_produto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length);
			strReturn = new String(commonByteArray_NOTA_FISCAL_DW_carga_dim_produto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NOTA_FISCAL_DW_carga_dim_produto) {

        	try {

        		int length = 0;
		
			        this.SK_PRODUTO = dis.readInt();
					
					this.COD_PRODUTO = readString(dis);
					
					this.NOME_PRODUTO = readString(dis);
					
					this.DTC_INICIO = readDate(dis);
					
					this.DTC_FIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SK_PRODUTO);
					
					// String
				
						writeString(this.COD_PRODUTO,dos);
					
					// String
				
						writeString(this.NOME_PRODUTO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_INICIO,dos);
					
					// java.util.Date
				
						writeDate(this.DTC_FIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SK_PRODUTO="+String.valueOf(SK_PRODUTO));
		sb.append(",COD_PRODUTO="+COD_PRODUTO);
		sb.append(",NOME_PRODUTO="+NOME_PRODUTO);
		sb.append(",DTC_INICIO="+String.valueOf(DTC_INICIO));
		sb.append(",DTC_FIM="+String.valueOf(DTC_FIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DIM_PRODUTO2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SK_PRODUTO, other.SK_PRODUTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		DIM_PRODUTO2Struct DIM_PRODUTO2 = new DIM_PRODUTO2Struct();
COUNTStruct COUNT = new COUNTStruct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DIM_PRODUTO2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String COD_PRODUTO;int count = 0;
       			int count_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.COD_PRODUTO == null) ? 0 : this.COD_PRODUTO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.COD_PRODUTO == null) {
								if (other.COD_PRODUTO != null) 
									return false;
							} else if (!this.COD_PRODUTO.equals(other.COD_PRODUTO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = context.banco_dados_Login;
					
					
					
	final String decryptedPassword_tDBInput_3 = context.banco_dados_Password; 
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
			String url_tDBInput_3 = "jdbc:postgresql://" + context.banco_dados_Server + ":" + context.banco_dados_Port + "/" + context.banco_dados_Database;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"SK_PRODUTO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"COD_PRODUTO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"NOME_PRODUTO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"DTC_INICIO\", \n  \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\".\"DTC_FIM\"\nFROM \""+context.banco_dados_Database+"\".\""+context.banco_dados_Schema+"\".\"DIM_PRODUTO\"";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								DIM_PRODUTO2.SK_PRODUTO = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(1) != null) {
                DIM_PRODUTO2.SK_PRODUTO = rs_tDBInput_3.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								DIM_PRODUTO2.COD_PRODUTO = null;
							} else {
	                         		
        	DIM_PRODUTO2.COD_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								DIM_PRODUTO2.NOME_PRODUTO = null;
							} else {
	                         		
        	DIM_PRODUTO2.NOME_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								DIM_PRODUTO2.DTC_INICIO = null;
							} else {
										
			DIM_PRODUTO2.DTC_INICIO = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 4);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								DIM_PRODUTO2.DTC_FIM = null;
							} else {
										
			DIM_PRODUTO2.DTC_FIM = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 5);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			//DIM_PRODUTO2
			//DIM_PRODUTO2


			
				if(execStat){
					runStat.updateStatOnConnection("DIM_PRODUTO2"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_1.COD_PRODUTO = DIM_PRODUTO2.COD_PRODUTO;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.COD_PRODUTO = operation_finder_tAggregateRow_1.COD_PRODUTO;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				operation_result_tAggregateRow_1.count_clmCount++;
				operation_result_tAggregateRow_1.count++;
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DIM_PRODUTO2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_COUNT begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_COUNT", false);
		start_Hash.put("tAdvancedHash_COUNT", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_COUNT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("COUNT" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_COUNT = 0;
		

			   		// connection name:COUNT
			   		// source node:tAggregateRow_1_AGGIN - inputs:(OnRowsEnd) outputs:(COUNT,COUNT) | target node:tAdvancedHash_COUNT - inputs:(COUNT) outputs:()
			   		// linked node: tMap_2 - inputs:(DIM_PRODUTO,COUNT) outputs:(COD_UNIC)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_COUNT = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<COUNTStruct> tHash_Lookup_COUNT =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<COUNTStruct>getLookup(matchingModeEnum_COUNT);
	   						   
		   	   	   globalMap.put("tHash_Lookup_COUNT", tHash_Lookup_COUNT);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_COUNT begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    COUNT.COD_PRODUTO = aggregated_row_tAggregateRow_1.COD_PRODUTO;
            				    COUNT.count = (int) aggregated_row_tAggregateRow_1.count;
	                                	COUNT.count = (int) aggregated_row_tAggregateRow_1.count_clmCount;
	                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_COUNT main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_COUNT";

	

			//COUNT
			//COUNT


			
				if(execStat){
					runStat.updateStatOnConnection("COUNT"+iterateId,1, 1);
				} 
			

		


			   
			   

					COUNTStruct COUNT_HashRow = new COUNTStruct();
		   	   	   
				
				COUNT_HashRow.COD_PRODUTO = COUNT.COD_PRODUTO;
				
				COUNT_HashRow.count = COUNT.count;
				
			tHash_Lookup_COUNT.put(COUNT_HashRow);
			
            




 


	tos_count_tAdvancedHash_COUNT++;

/**
 * [tAdvancedHash_COUNT main ] stop
 */
	
	/**
	 * [tAdvancedHash_COUNT process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_COUNT";

	

 



/**
 * [tAdvancedHash_COUNT process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_COUNT process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_COUNT";

	

 



/**
 * [tAdvancedHash_COUNT process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_COUNT end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_COUNT";

	

tHash_Lookup_COUNT.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("COUNT"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_COUNT", true);
end_Hash.put("tAdvancedHash_COUNT", System.currentTimeMillis());




/**
 * [tAdvancedHash_COUNT end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_COUNT finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_COUNT";

	

 



/**
 * [tAdvancedHash_COUNT finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final carga_dim_produto carga_dim_produtoClass = new carga_dim_produto();

        int exitCode = carga_dim_produtoClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = carga_dim_produto.class.getClassLoader().getResourceAsStream("nota_fiscal_dw/carga_dim_produto_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = carga_dim_produto.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("banco_dados_Password", "id_Password");
				
            		String pwd_banco_dados_Password_value = context.getProperty("banco_dados_Password");
            		context.banco_dados_Password = null;
            		if(pwd_banco_dados_Password_value!=null) {
            			if(context_param.containsKey("banco_dados_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.banco_dados_Password = pwd_banco_dados_Password_value;
            			} else if (!pwd_banco_dados_Password_value.isEmpty()) {
            				try {
            					context.banco_dados_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_banco_dados_Password_value);
            					context.put("banco_dados_Password",context.banco_dados_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("banco_dados_Login", "id_String");
				
                context.banco_dados_Login=(String) context.getProperty("banco_dados_Login");
				    context.setContextType("banco_dados_Server", "id_String");
				
                context.banco_dados_Server=(String) context.getProperty("banco_dados_Server");
				    context.setContextType("banco_dados_Database", "id_String");
				
                context.banco_dados_Database=(String) context.getProperty("banco_dados_Database");
				    context.setContextType("banco_dados_Schema", "id_String");
				
                context.banco_dados_Schema=(String) context.getProperty("banco_dados_Schema");
				    context.setContextType("banco_dados_Port", "id_String");
				
                context.banco_dados_Port=(String) context.getProperty("banco_dados_Port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("banco_dados_Password")) {
                context.banco_dados_Password = (java.lang.String) parentContextMap.get("banco_dados_Password");
            }if (parentContextMap.containsKey("banco_dados_Login")) {
                context.banco_dados_Login = (String) parentContextMap.get("banco_dados_Login");
            }if (parentContextMap.containsKey("banco_dados_Server")) {
                context.banco_dados_Server = (String) parentContextMap.get("banco_dados_Server");
            }if (parentContextMap.containsKey("banco_dados_Database")) {
                context.banco_dados_Database = (String) parentContextMap.get("banco_dados_Database");
            }if (parentContextMap.containsKey("banco_dados_Schema")) {
                context.banco_dados_Schema = (String) parentContextMap.get("banco_dados_Schema");
            }if (parentContextMap.containsKey("banco_dados_Port")) {
                context.banco_dados_Port = (String) parentContextMap.get("banco_dados_Port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("banco_dados_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : carga_dim_produto");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     151791 characters generated by Talend Open Studio for Data Integration 
 *     on the 10 de Maio de 2019 16h30min42s BRT
 ************************************************************************************************/